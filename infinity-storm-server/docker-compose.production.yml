version: '3.8'

services:
  # Infinity Storm Game Server
  infinity-storm:
    build:
      context: ..
      dockerfile: infinity-storm-server/Dockerfile.production
    container_name: infinity-storm-server
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database (use host Supabase - Windows host IP)
      - DB_HOST=192.168.0.110
      - DB_PORT=54322
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DATABASE_URL=postgresql://postgres:postgres@192.168.0.110:54322/postgres?sslmode=disable
      - PGSSLMODE=${PGSSLMODE:-disable}
      # Supabase on host machine (use host IP not 127.0.0.1)
      - SUPABASE_URL=http://192.168.0.110:54321
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}
      # JWT secrets (required in production)
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      # Increase access token lifetime for dev/staging stability
      - JWT_ACCESS_EXPIRY=${JWT_ACCESS_EXPIRY:-12h}
      - JWT_REFRESH_EXPIRY=${JWT_REFRESH_EXPIRY:-7d}
      - FORCE_HTTPS=${FORCE_HTTPS:-false}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SKIP_REDIS=false
      # legacy vars kept for compatibility (not used when REDIS_URL is set)
      - REDIS_HOST=${REDIS_HOST:-host.docker.internal}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./logs:/app/logs
    networks:
      - infinity-storm-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: infinity-storm-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-54329}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-infinitystorm}
      - POSTGRES_USER=${POSTGRES_USER:-infinitystorm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/migrations:/docker-entrypoint-initdb.d
    networks:
      - infinity-storm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-infinitystorm}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (internal service for dev/staging)
  redis:
    image: redis:7-alpine
    container_name: infinity-storm-redis
    restart: unless-stopped
    command: ["sh","-c","redis-server --appendonly yes $${REDIS_PASSWORD:+--requirepass $$REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - infinity-storm-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$${REDIS_PASSWORD}\" ping || redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy (optional)
  # nginx is optional; disable in dev to avoid mount conflicts
  # nginx:
  #   image: nginx:alpine
  #   container_name: infinity-storm-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - nginx_logs:/var/log/nginx
  #   networks:
  #     - infinity-storm-network
  #   depends_on:
  #     - infinity-storm
  #   healthcheck:
  #     test: ["CMD", "nginx", "-t"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  infinity-storm-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local








