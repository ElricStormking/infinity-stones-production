#!/usr/bin/env node

/**
 * Seed or update the canonical playtest player in Supabase.
 *
 * Usage:
 *   node scripts/seedTestPlayer.js
 *
 * Environment variables (defaults in parentheses):
 *   TEST_PLAYER_USERNAME (portal_test_player)
 *   TEST_PLAYER_EMAIL    (<username>@portal.test)
 *   TEST_PLAYER_PASSWORD (TestPlayer!234)
 *   TEST_PLAYER_ID       (auto-generated by Supabase)
 *   TEST_PLAYER_IS_DEMO  (false)
 */

const path = require('path');
const fs = require('fs');
const bcrypt = require('bcrypt');
const { createClient } = require('@supabase/supabase-js');

// Load environment files (project root and server directory)
const envPaths = [
  path.resolve(__dirname, '..', '.env'),
  path.resolve(__dirname, '..', '..', '.env')
];

envPaths.forEach((envPath) => {
  if (fs.existsSync(envPath)) {
    require('dotenv').config({ path: envPath, override: false });
  }
});

const supabaseUrl = process.env.SUPABASE_URL || 'http://127.0.0.1:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('ERROR: SUPABASE_SERVICE_ROLE_KEY is required to seed the test player.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: { autoRefreshToken: false, persistSession: false },
  db: { schema: 'public' }
});

async function main() {
  const username = (process.env.TEST_PLAYER_USERNAME || 'portal_test_player').trim();
  const email = (process.env.TEST_PLAYER_EMAIL || `${username}@portal.test`).trim();
  const password = process.env.TEST_PLAYER_PASSWORD || 'TestPlayer!234';
  const playerId = process.env.TEST_PLAYER_ID ? process.env.TEST_PLAYER_ID.trim() : null;
  const isDemo = process.env.TEST_PLAYER_IS_DEMO === 'true';

  console.log(`Seeding playtest player '${username}' (${email})...`);

  const passwordHash = await bcrypt.hash(password, 12);

  const payload = {
    username,
    email,
    password_hash: passwordHash,
    is_demo: isDemo,
    status: 'active'
  };

  if (playerId) {
    payload.id = playerId;
  }

  const { data, error } = await supabase
    .from('players')
    .upsert(payload, { onConflict: 'username' })
    .select()
    .single();

  if (error) {
    console.error('Failed to seed test player:', error);
    process.exit(1);
  }

  console.log('Playtest player ready:');
  console.log(`  id:        ${data.id}`);
  console.log(`  username:  ${data.username}`);
  console.log(`  email:     ${data.email}`);
  console.log(`  is_demo:   ${data.is_demo}`);
  console.log(`  status:    ${data.status}`);
  console.log('');
  console.log('Use TEST_PLAYER_PASSWORD to log in via the real auth flow.');
}

main().catch((error) => {
  console.error('Unexpected error while seeding test player:', error);
  process.exit(1);
});
