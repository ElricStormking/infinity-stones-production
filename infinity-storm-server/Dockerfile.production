# Production Dockerfile for Infinity Storm Server
# Multi-stage build for optimized image size

# ========================================
# Stage 1: Build Dependencies
# ========================================
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build application (if build script exists)
RUN npm run build 2>/dev/null || echo "No build script found"

# ========================================
# Stage 2: Production Runtime
# ========================================
FROM node:18-alpine AS production

# Install production dependencies only
RUN apk add --no-cache \
    tini \
    curl \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files
COPY --chown=nodejs:nodejs package*.json ./

# Install production dependencies only
RUN npm ci --production --no-optional && \
    npm cache clean --force

# Copy built application from builder
COPY --chown=nodejs:nodejs --from=builder /app/dist ./dist 2>/dev/null || true
COPY --chown=nodejs:nodejs --from=builder /app/server.js ./
COPY --chown=nodejs:nodejs --from=builder /app/src ./src
COPY --chown=nodejs:nodejs --from=builder /app/game-logic ./game-logic
COPY --chown=nodejs:nodejs --from=builder /app/views ./views 2>/dev/null || true
COPY --chown=nodejs:nodejs --from=builder /app/public ./public 2>/dev/null || true

# Create log directory
RUN mkdir -p /app/logs && chown nodejs:nodejs /app/logs

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use tini to handle signals properly
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["node", "server.js"]





